================================================================================
Last Updated Oct-08-2017
Author: Joseph Cullen - Software Team Leader <Joseph.Cullen@stonybrook.edu>
Git repo basics guide
================================================================================

================================================================================
A typical workflow for a person on the team:
================================================================================
$ git branch

Verify you are on the branch you think you are

$ git checkout BRANCH_NAME 

Do this if you are not on the correct branch

$ git pull origin BRANCH_NAME

Don't always have to do this. This gets the most recent copy from the server.

Then you should edit whatever files you want. In any text editor you want. 
After you are done editiing. Add the files to stage the changes:

$ git add FILE_1 FILE_2 FILE_3

Add files that you are modified or created

$ git status

If you want to check that your changes went through

$ git commit -m "Helpful commit message"

Commit these changes locally with a helpful commit message.

$ git push origin BRANCH_NAME

Put these changes onto the server.

================================================================================
Description
================================================================================
Git has a lot of commands, but only a few are needed most of the time. All git commands start by saying 'git <command>'.

Git works by saving all changes that the user chooses to commit. This allows changes to be made, but we can revert back to previous versions of files if something bad gets broken. This is useful in software development because it can help us trace down bugs or find out when we broke something. 

================================================================================
Definitions:
================================================================================

Repository/repo: The collection of all changes AKA the history of all files that we want to keep track of. 

================================================================================
Some commands:
================================================================================

$ git clone REPOSITORY_URL

The clone command create a copy of a repository. For a team project this is typically this is on some central server that everyone can access. This year we chose to use bitbucket to host our repository. Once the project is cloned you should not need to use this again

$ git branch

List all branches you have locally on your computer.

$ git branch NEW_BRANCH_NAME

Creates a new branch called NEW_BRANCH_NAME

$ git checkout BRANCH_NAME 

Switches files in your repository to the state they were in last time BRANCH_NAME was updated.

$ git status

Lists any files which have changed since the last commit

$ git add FILENAME

Stages the file called FILENAME (folders/directories are files too)

$ git status

Also lists any files which are staged.

$ git commit

Opens up a default command line text editor for you to enter a commit message. If this is confusing just use the version below with the -m flag. 

Commits all stanged changes. This saves a 'snapshot' of what you have done since the last commit. Typically in an industry a commit might be an entire feature or bug fix. For our purposes any thing that is 'progress' towards something should probably be committed.

$ git commit -m "COMMIT MESSAGE"

Same as above but the commit message COMMIT_MESSAGE.

$ git push origin BRANCH_NAME

Puts all changes you made on BRANCH_NAME to origin (the place you cloned the repo from). 
Do NOT push to master branch.

$ git pull origin BRANCH_NAME

Get all changes to your branch from origin.

