Last Updated May-30-2017
Author: Joseph Cullen - Software Team Leader <Joseph.Cullen@stonybrook.edu>

Running Demo 1
================================================================================

================================================================================
EASIEST WAY
================================================================================

From the top level folder (urc2018)

$ ./scripts/run_tutorial

CTRL-C to kill 

Output should look something like this. 

[ INFO] [1496271342.721782081]: I heard: [hello world 10]
[ INFO] [1496271342.820515569]: hello world 11
[ INFO] [1496271342.820805542]: I heard: [hello world 11]
[ INFO] [1496271342.920715806]: hello world 12
[ INFO] [1496271342.920981006]: I heard: [hello world 12]
[ INFO] [1496271343.021299846]: hello world 13
[ INFO] [1496271343.021566733]: I heard: [hello world 13]
[ INFO] [1496271343.121033022]: hello world 14
[ INFO] [1496271343.121305027]: I heard: [hello world 14]
[ INFO] [1496271343.221384427]: hello world 15
[ INFO] [1496271343.221713244]: I heard: [hello world 15]

================================================================================
EASY WAY
================================================================================

Build the code:

$ catkin_make

Let ROS know that this directory has ROS code in it

$ source devel/setup.bash 

Launch ROS with the specified modules and params in launch/tutorial.launch. This file is short and human readable if you are curious what it looks like.

Look at the 2 files in src/beginner_tutorials/src These are 2 short files that show how to get modules to communicate to each other

$ roslaunch launch/tutorial.launch 

CTRL-C to kill 

Output should look something like this. 

[ INFO] [1496271342.721782081]: I heard: [hello world 10]
[ INFO] [1496271342.820515569]: hello world 11
[ INFO] [1496271342.820805542]: I heard: [hello world 11]
[ INFO] [1496271342.920715806]: hello world 12
[ INFO] [1496271342.920981006]: I heard: [hello world 12]
[ INFO] [1496271343.021299846]: hello world 13
[ INFO] [1496271343.021566733]: I heard: [hello world 13]
[ INFO] [1496271343.121033022]: hello world 14
[ INFO] [1496271343.121305027]: I heard: [hello world 14]
[ INFO] [1496271343.221384427]: hello world 15
[ INFO] [1496271343.221713244]: I heard: [hello world 15]






================================================================================
MANUAL WAY
================================================================================

Demo 1 is located in src/beginner/tutorials/src. I created it by following the following tutorials.

http://wiki.ros.org/ROS/Tutorials/CreatingPackage
http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29

Their folder structure will probably get reorgnaized soon.

Run roscore in its own terminal window

$ roscore

With roscore running in a separate terminal and while you are at the top level of the directory (ls should diplsy, build, devel, doc, scripts...)

$ source devel/setup.bash
$ catkin_make

In 2 separate terminal windows:
$ source devel/setup.bash
$ rosrun beginner_tutorials listener

AND

$ source devel/setup.bash
$ rosrun beginner_tutorials talker


This means you have at least 3 terminals open right now. One for roscore. One for the talker and one for the listener. Talker should be spamming the console with
[ INFO] [1496168776.752961102]: hello world 3279

Listener with
[ INFO] [1496168776.653306105]: I heard: [hello world 3278]

ctrl-c to kill these.

The source for these are in src/beginner_tutorials/src

This demonstrates how messages are sent between components which are equivalent to modules from the robot last year. Look at the source code for these files in src/beginner_tutorials/src/listener.cpp and talker.cpp

================================================================================
Not neccesary for most members to know
================================================================================

in src/beginner_tutorials/CMakeLists.txt and src/beginner_tutorials/package.xml is how these can build and launch easily as a set in the easy version of this tutorial. That is how we would want it to launch when we are testing the robot. At the end of the CMakeLists.txt is 
These tell it that these are both what needs to be built.
********************************************************************************
add_executable(talker src/talker.cpp)
target_link_libraries(talker ${catkin_LIBRARIES})
add_dependencies(talker beginner_tutorials_generate_messages_cpp)

add_executable(listener src/listener.cpp)
target_link_libraries(listener ${catkin_LIBRARIES})
add_dependencies(listener beginner_tutorials_generate_messages_cpp)
********************************************************************************




The file: launch/tutorial.launch is used to tell both of these to launch along with ROS. Most of these files could be copy and pasted with slight modifications to add more modules for different tests.
